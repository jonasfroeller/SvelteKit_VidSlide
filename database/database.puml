@startuml database
!define table(x) class x << (T,#FFAAAA) >>
!define PK(x) <b><u>x</u></b>
!define FK(x) <u>x</u>
!define NOT_NULL(x) <b><i>x</i></b>
!define DEFAULT(x) <i>x</i>

left to right direction
skinparam roundcorner 5
skinparam linetype ortho /' polyline '/
skinparam shadowing false
skinparam handwritten false
skinparam class {
  BackgroundColor white
  ArrowColor #2688d4
  ArrowThickness 2
  BorderColor #2688d4
}

table(VS_USER) {
  PK(VS_USER_ID INT AUTO_INCREMENT)
  NOT_NULL(USER_USERNAME VARCHAR(25))
  NOT_NULL(USER_PASSWORD VARCHAR(250))
  DEFAULT(USER_PROFILEPICTURE VARCHAR(100))
  DEFAULT(USER_PROFILEDESCRIPTION VARCHAR(1000))
  DEFAULT(USER_DATETIMECREATED TIMESTAMP)
  DEFAULT(USER_LASTUPDATE TIMESTAMP)
  CONSTRAINT UNIQUE_USERNAME UNIQUE (USER_USERNAME)
}

table(VS_VIDEO) {
  PK(VS_VIDEO_ID INT AUTO_INCREMENT)
  NOT_NULL(VIDEO_TITLE VARCHAR(25))
  DEFAULT(VIDEO_DESCRIPTION VARCHAR(500))
  NOT_NULL(VIDEO_LOCATION VARCHAR(250))
  NOT_NULL(VIDEO_SIZE VARCHAR(6))
  DEFAULT(VIDEO_VIEWS INT)
  DEFAULT(VIDEO_SHARES INT)
  DEFAULT(VIDEO_DATETIMEPOSTED TIMESTAMP)
  DEFAULT(VIDEO_LASTUPDATE TIMESTAMP)
  FK(VS_USER_ID INT)
  FOREIGN KEY (VS_USER_ID) REFERENCES VS_USER(VS_USER_ID)
}

table(VS_USER_SOCIAL) {
  PK(SOCIAL_ID INT AUTO_INCREMENT)
  NOT_NULL(SOCIAL_PLATFORM VARCHAR(25))
  NOT_NULL(SOCIAL_URL VARCHAR(250))
  FK(VS_USER_ID INT)
  FOREIGN KEY (VS_USER_ID) REFERENCES VS_USER(VS_USER_ID)
  CONSTRAINT UNIQUE_SOCIAL UNIQUE (SOCIAL_PLATFORM, SOCIAL_URL, VS_USER_ID)
}

table(VS_USER_FOLLOWING) {
  PK(FOLLOWING_ID INT AUTO_INCREMENT)
  FK(FOLLOWING_SUBSCRIBER INT)
  FK(FOLLOWING_SUBSCRIBED INT)
  FOREIGN KEY (FOLLOWING_SUBSCRIBER) REFERENCES VS_USER(VS_USER_ID)
  FOREIGN KEY (FOLLOWING_SUBSCRIBED) REFERENCES VS_USER(VS_USER_ID)
  CONSTRAINT UNIQUE_FOLLOWING UNIQUE (FOLLOWING_SUBSCRIBER, FOLLOWING_SUBSCRIBED)
}

table(VS_VIDEO_FEEDBACK) {
  PK(VIDEO_FEEDBACK_ID INT AUTO_INCREMENT)
  NOT_NULL(VIDEO_FEEDBACK_TYPE ENUM('positive', 'negative'))
  FK(VS_VIDEO_ID INT)
  FK(VS_USER_ID INT)
  FOREIGN KEY (VS_VIDEO_ID) REFERENCES VS_VIDEO(VS_VIDEO_ID)
  FOREIGN KEY (VS_USER_ID) REFERENCES VS_USER(VS_USER_ID)
  CONSTRAINT UNIQUE_VIDEO_FEEDBACK UNIQUE (VS_VIDEO_ID, VS_USER_ID)
}

table(VS_COMMENT_FEEDBACK) {
  PK(COMMENT_FEEDBACK_ID INT AUTO_INCREMENT)
  NOT_NULL(COMMENT_FEEDBACK_TYPE ENUM('positive', 'negative'))
  FK(COMMENT_ID INT)
  FK(VS_USER_ID INT)
  FOREIGN KEY (COMMENT_ID) REFERENCES VS_VIDEO_COMMENT(COMMENT_ID)
  FOREIGN KEY (VS_USER_ID) REFERENCES VS_USER(VS_USER_ID)
  CONSTRAINT UNIQUE_COMMENT_FEEDBACK UNIQUE (COMMENT_ID, VS_USER_ID)
}

table(VS_VIDEO_HASHTAG) {
  PK(HASHTAG_ID INT AUTO_INCREMENT)
  NOT_NULL(HASHTAG_NAME VARCHAR(500))
  FK(VS_VIDEO_ID INT)
  FOREIGN KEY (VS_VIDEO_ID) REFERENCES VS_VIDEO(VS_VIDEO_ID)
  CONSTRAINT UNIQUE_HASHTAG UNIQUE (VS_VIDEO_ID, HASHTAG_NAME)
}

table(VS_VIDEO_COMMENT) {
  PK(COMMENT_ID INT AUTO_INCREMENT)
  DEFAULT(COMMENT_PARENT_ID INT)
  NOT_NULL(COMMENT_MESSAGE VARCHAR(250))
  DEFAULT(COMMENT_DATETIMEPOSTED TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
  DEFAULT(COMMENT_LASTUPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)
  FK(VS_VIDEO_ID INT NOT NULL)
  FK(VS_USER_ID INT NOT NULL)
  FK VS_VIDEO(VS_VIDEO_ID)
  FK VS_USER(VS_USER_ID)
}

VS_USER_FOLLOWING -> VS_USER: FOLLOWING_SUBSCRIBER
VS_USER_FOLLOWING -> VS_USER: FOLLOWING_SUBSCRIBED
VS_VIDEO -> VS_USER: VS_USER_ID
VS_USER_SOCIAL -> VS_USER: VS_USER_ID
VS_VIDEO_FEEDBACK -> VS_VIDEO: VS_VIDEO_ID
VS_VIDEO_FEEDBACK -> VS_USER: VS_USER_ID
VS_COMMENT_FEEDBACK -> VS_VIDEO_COMMENT: COMMENT_ID
VS_COMMENT_FEEDBACK -> VS_USER: VS_USER_ID
VS_VIDEO_HASHTAG -> VS_VIDEO: VS_VIDEO_ID
VS_VIDEO_COMMENT -> VS_USER: VS_USER_ID
VS_VIDEO_COMMENT -> VS_VIDEO: VS_VIDEO_ID
VS_VIDEO_COMMENT -> VS_VIDEO_COMMENT: COMMENT_PARENT_ID

@enduml
